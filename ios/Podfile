# Resolve react_native_pods.rb with node to allow for hoisting
def node_require(script)
  # Resolve script with node to allow for hoisting
  require Pod::Executable.execute_command('node', ['-p',
    "require.resolve(
      '#{script}',
      {paths: [process.argv[1]]},
    )", __dir__]).strip
end

# Include necessary scripts for React Native and permissions
node_require('react-native/scripts/react_native_pods.rb')
node_require('react-native-permissions/scripts/setup.rb')

# Set the platform version to iOS 13.0 for compatibility
platform :ios, '16.0'

# Enforce static linkage for compatibility
use_frameworks! :linkage => :static

# Prepare the React Native project
prepare_react_native_project!

# Set up permissions for required features
setup_permissions([
  'Camera',
  'FaceID',
  'PhotoLibrary',
  'PhotoLibraryAddOnly',
])

# Handle dynamic frameworks if necessary
linkage = ENV['USE_FRAMEWORKS']
if linkage
  Pod::UI.puts "Configuring Pod with #{linkage}ally linked Frameworks".green
  # Uncomment if frameworks are required
  # use_frameworks! :linkage => linkage.to_sym
end

# Define the main target
target 'WalletDS' do
  # Configure React Native modules
  config = use_native_modules!

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => false, # Hermes desactivado por ahora
    # An absolute path to your application root.
    :app_path => "#{Pod::Config.instance.installation_root}/.."
  )

  # Define the testing target
  target 'WalletDSTests' do
    inherit! :complete
    # Pods for testing
  end

  # Post-install hooks
  post_install do |installer|
    # Apply React Native-specific configurations
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
    )

    # Workaround for arm64 architecture issues on simulators
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['EXCLUDED_ARCHS[sdk=iphonesimulator*]'] = 'arm64'
      end
    end
  end
end
